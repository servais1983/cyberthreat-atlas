const mongoose = require('mongoose');\n\n/**\n * Modèle Mongoose pour les régions géographiques\n */\nconst RegionSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  countries: [{\n    type: String,\n    trim: true\n  }],\n  threatLevel: {\n    type: String,\n    enum: ['Low', 'Medium', 'High', 'Critical'],\n    default: 'Medium'\n  },\n  activeThreats: [{\n    type: String,\n    trim: true\n  }],\n  commonTargets: [{\n    type: String,\n    trim: true\n  }],\n  recentCampaigns: [{\n    type: String,\n    trim: true\n  }],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n});\n\n// Middleware pour mettre à jour la date de dernière modification\nRegionSchema.pre('save', function(next) {\n  this.updatedAt = Date.now();\n  next();\n});\n\n// Méthode pour obtenir les groupes d'attaque ciblant cette région\nRegionSchema.methods.getAttackGroups = async function() {\n  const AttackGroup = mongoose.model('AttackGroup');\n  \n  // Recherche directe dans les activeThreats de cette région\n  const directGroups = await AttackGroup.find({ \n    name: { $in: this.activeThreats } \n  });\n  \n  // Recherche des groupes qui mentionnent cette région dans leurs cibles\n  const indirectGroups = await AttackGroup.find({ \n    targetRegions: this.name,\n    name: { $nin: this.activeThreats } // Éviter les doublons\n  });\n  \n  // Recherche des groupes qui ciblent des pays de cette région\n  let countryGroups = [];\n  if (this.countries && this.countries.length > 0) {\n    // Supposons que countryOfOrigin contient le code ISO à deux lettres du pays\n    countryGroups = await AttackGroup.find({\n      countryOfOrigin: { $in: this.countries },\n      name: { $nin: [...this.activeThreats, ...indirectGroups.map(g => g.name)] } // Éviter les doublons\n    });\n  }\n  \n  // Combiner les résultats\n  return [...directGroups, ...indirectGroups, ...countryGroups];\n};\n\n// Méthode pour obtenir les campagnes ciblant cette région ou ses pays\nRegionSchema.methods.getCampaigns = async function() {\n  const Campaign = mongoose.model('Campaign');\n  \n  // Campagnes mentionnant directement cette région (via recentCampaigns)\n  const directCampaigns = await Campaign.find({ \n    name: { $in: this.recentCampaigns } \n  });\n  \n  // Campagnes ciblant des pays de cette région\n  let countryCampaigns = [];\n  if (this.countries && this.countries.length > 0) {\n    countryCampaigns = await Campaign.find({\n      targetCountries: { $in: this.countries },\n      name: { $nin: this.recentCampaigns } // Éviter les doublons\n    });\n  }\n  \n  // Combiner les résultats\n  return [...directCampaigns, ...countryCampaigns];\n};\n\n// Méthode statique pour obtenir la liste de tous les pays\nRegionSchema.statics.getAllCountries = async function() {\n  // Cette méthode retourne la liste complète des pays uniques mentionnés dans toutes les régions\n  const regions = await this.find({});\n  \n  // Extraire tous les codes pays uniques\n  const countries = new Set();\n  regions.forEach(region => {\n    if (region.countries && region.countries.length > 0) {\n      region.countries.forEach(country => countries.add(country));\n    }\n  });\n  \n  // Convertir en tableau\n  return Array.from(countries).sort();\n};\n\nconst Region = mongoose.model('Region', RegionSchema);\n\nmodule.exports = Region;