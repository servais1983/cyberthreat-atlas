const mongoose = require('mongoose');\n\n/**\n * Modèle Mongoose pour les malwares et outils\n */\nconst MalwareSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  aliases: [{\n    type: String,\n    trim: true\n  }],\n  type: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String\n  },\n  firstSeen: {\n    type: Date\n  },\n  lastSeen: {\n    type: Date\n  },\n  platforms: [{\n    type: String,\n    trim: true\n  }],\n  capabilities: [{\n    type: String,\n    trim: true\n  }],\n  associatedGroups: [{\n    type: String,\n    trim: true\n  }],\n  usedInCampaigns: [{\n    type: String,\n    trim: true\n  }],\n  references: [{\n    url: {\n      type: String,\n      required: true\n    },\n    source: {\n      type: String,\n      required: true\n    },\n    description: {\n      type: String\n    }\n  }],\n  samples: [{\n    hash: {\n      type: String,\n      required: true\n    },\n    firstSeen: {\n      type: Date\n    },\n    url: {\n      type: String\n    }\n  }],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n});\n\n// Index pour les recherches textuelles\nMalwareSchema.index({ \n  name: 'text', \n  aliases: 'text', \n  description: 'text' \n});\n\n// Middleware pour mettre à jour la date de dernière modification\nMalwareSchema.pre('save', function(next) {\n  this.updatedAt = Date.now();\n  next();\n});\n\n// Méthode pour obtenir les détails complets des groupes associés\nMalwareSchema.methods.getAttackGroups = async function() {\n  const AttackGroup = mongoose.model('AttackGroup');\n  return await AttackGroup.find({ name: { $in: this.associatedGroups } });\n};\n\n// Méthode pour obtenir les détails complets des campagnes\nMalwareSchema.methods.getCampaigns = async function() {\n  const Campaign = mongoose.model('Campaign');\n  return await Campaign.find({ malware: this.name });\n};\n\n// Méthode pour obtenir les techniques associées à ce malware\nMalwareSchema.methods.getRelatedTechniques = async function() {\n  const Campaign = mongoose.model('Campaign');\n  const Technique = mongoose.model('Technique');\n  \n  // Trouver toutes les campagnes utilisant ce malware\n  const campaigns = await Campaign.find({ malware: this.name });\n  \n  // Extraire tous les IDs de techniques uniques\n  const techniqueIds = [...new Set(\n    campaigns.flatMap(campaign => campaign.techniques)\n  )];\n  \n  // Récupérer les détails des techniques\n  return await Technique.find({ mitreId: { $in: techniqueIds } });\n};\n\n// Méthode statique pour trouver les malwares par type\nMalwareSchema.statics.findByType = function(type) {\n  return this.find({ type });\n};\n\n// Méthode statique pour trouver les malwares par plateforme\nMalwareSchema.statics.findByPlatform = function(platform) {\n  return this.find({ platforms: platform });\n};\n\nconst Malware = mongoose.model('Malware', MalwareSchema);\n\nmodule.exports = Malware;