const mongoose = require('mongoose');\n\n/**\n * Modèle Mongoose pour les secteurs d'activité\n */\nconst SectorSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  description: {\n    type: String\n  },\n  commonVulnerabilities: [{\n    type: String,\n    trim: true\n  }],\n  commonAttackVectors: [{\n    type: String,\n    trim: true\n  }],\n  threatGroups: [{\n    type: String,\n    trim: true\n  }],\n  recommendedControls: [{\n    type: String,\n    trim: true\n  }],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n});\n\n// Middleware pour mettre à jour la date de dernière modification\nSectorSchema.pre('save', function(next) {\n  this.updatedAt = Date.now();\n  next();\n});\n\n// Méthode pour obtenir les groupes d'attaque ciblant ce secteur\nSectorSchema.methods.getAttackGroups = async function() {\n  const AttackGroup = mongoose.model('AttackGroup');\n  \n  // Recherche directe dans les threatGroups de ce secteur\n  const directGroups = await AttackGroup.find({ \n    name: { $in: this.threatGroups } \n  });\n  \n  // Recherche des groupes qui mentionnent ce secteur dans leurs cibles\n  const indirectGroups = await AttackGroup.find({ \n    targetSectors: this.name,\n    name: { $nin: this.threatGroups } // Éviter les doublons\n  });\n  \n  // Combiner les résultats\n  return [...directGroups, ...indirectGroups];\n};\n\n// Méthode pour obtenir les campagnes ciblant ce secteur\nSectorSchema.methods.getCampaigns = async function() {\n  const Campaign = mongoose.model('Campaign');\n  return await Campaign.find({ targetSectors: this.name });\n};\n\n// Méthode pour obtenir les techniques fréquemment utilisées contre ce secteur\nSectorSchema.methods.getCommonTechniques = async function() {\n  const Campaign = mongoose.model('Campaign');\n  const Technique = mongoose.model('Technique');\n  \n  // Trouver toutes les campagnes ciblant ce secteur\n  const campaigns = await Campaign.find({ targetSectors: this.name });\n  \n  // Extraire tous les IDs de techniques et leur fréquence\n  const techniquesCount = {};\n  campaigns.forEach(campaign => {\n    campaign.techniques.forEach(technique => {\n      techniquesCount[technique] = (techniquesCount[technique] || 0) + 1;\n    });\n  });\n  \n  // Convertir en tableau et trier par fréquence\n  const sortedTechniques = Object.entries(techniquesCount)\n    .sort((a, b) => b[1] - a[1])\n    .map(entry => entry[0]);\n  \n  // Récupérer les détails des techniques (limité aux 20 plus fréquentes)\n  return await Technique.find({ \n    mitreId: { $in: sortedTechniques.slice(0, 20) } \n  });\n};\n\nconst Sector = mongoose.model('Sector', SectorSchema);\n\nmodule.exports = Sector;