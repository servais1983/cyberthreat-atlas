const mongoose = require('mongoose');\n\n/**\n * Modèle Mongoose pour les groupes d'attaque (APTs)\n */\nconst AttackGroupSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  aliases: [{\n    type: String,\n    trim: true\n  }],\n  countryOfOrigin: {\n    type: String,\n    trim: true\n  },\n  description: {\n    type: String\n  },\n  firstSeen: {\n    type: Date\n  },\n  lastSeen: {\n    type: Date\n  },\n  motivations: [{\n    type: String,\n    trim: true\n  }],\n  targetSectors: [{\n    type: String,\n    trim: true\n  }],\n  targetRegions: [{\n    type: String,\n    trim: true\n  }],\n  sophisticationLevel: {\n    type: String,\n    enum: ['Low', 'Medium', 'High', 'Unknown'],\n    default: 'Unknown'\n  },\n  references: [{\n    url: {\n      type: String,\n      required: true\n    },\n    source: {\n      type: String,\n      required: true\n    },\n    description: {\n      type: String\n    }\n  }],\n  relatedGroups: [{\n    type: String\n  }],\n  threatLevel: {\n    type: Number,\n    min: 1,\n    max: 10,\n    default: 5\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n});\n\n// Index pour les recherches textuelles\nAttackGroupSchema.index({ \n  name: 'text', \n  aliases: 'text', \n  description: 'text' \n});\n\n// Middleware pour mettre à jour la date de dernière modification\nAttackGroupSchema.pre('save', function(next) {\n  this.updatedAt = Date.now();\n  next();\n});\n\n// Méthode pour obtenir les techniques utilisées par ce groupe\nAttackGroupSchema.methods.getTechniques = async function() {\n  const Campaign = mongoose.model('Campaign');\n  const Technique = mongoose.model('Technique');\n  \n  // Trouver toutes les campagnes menées par ce groupe\n  const campaigns = await Campaign.find({ attackGroups: this.name });\n  \n  // Extraire tous les IDs de techniques uniques\n  const techniqueIds = [...new Set(\n    campaigns.flatMap(campaign => campaign.techniques)\n  )];\n  \n  // Récupérer les détails des techniques\n  return await Technique.find({ mitreId: { $in: techniqueIds } });\n};\n\n// Méthode pour obtenir les malwares utilisés par ce groupe\nAttackGroupSchema.methods.getMalware = async function() {\n  const Malware = mongoose.model('Malware');\n  return await Malware.find({ associatedGroups: this.name });\n};\n\n// Méthode pour obtenir les campagnes menées par ce groupe\nAttackGroupSchema.methods.getCampaigns = async function() {\n  const Campaign = mongoose.model('Campaign');\n  return await Campaign.find({ attackGroups: this.name });\n};\n\nconst AttackGroup = mongoose.model('AttackGroup', AttackGroupSchema);\n\nmodule.exports = AttackGroup;