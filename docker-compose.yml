version: '3.8'

services:
  # Service pour MongoDB
  mongo:
    image: mongo:6
    container_name: cyberthreat-atlas-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: cyberthreat-atlas
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - cyberthreat-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/cyberthreat-atlas --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Service pour le backend (API)
  backend:
    build: ./backend
    container_name: cyberthreat-atlas-backend
    restart: always
    depends_on:
      - mongo
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      - MONGO_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-password}@mongo:27017/cyberthreat-atlas?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-cyberthreatsecretkey}
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - cyberthreat-network
    command: npm start

  # Service pour le frontend
  frontend:
    build: ./frontend
    container_name: cyberthreat-atlas-frontend
    restart: always
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api/v1
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - cyberthreat-network
    command: npm start

networks:
  cyberthreat-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
